{"version":3,"sources":["components/InfoBox.comp.js","components/utility/util.js","components/Map.comp.js","components/Table.comp.js","components/LineGraph.comp.js","components/Vaccine.comp.js","components/Therapeutic.comp.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","style","cursor","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","noWrap","continuousWorld","map","country","Circle","id","Math","random","toString","substr","countryInfo","lat","long","fillOpacity","fillColor","radius","sqrt","Popup","backgroundImage","flag","showDataOnMap","Table","key","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Vaccine","vaccine","candidate","mechanism","trialPhase","institutions","join","href","rel","target","Therapeutic","therapeutic","medicationClass","tradeName","researcher","lastUpdate","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setVaccine","setTherapeutic","info","therapeutics","thera","developerResearcher","getTherapeuticData","vac","getVaccineData","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb9d88de.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport \"./Infobox.css\"\r\n\r\n//displays information of today's cases, recovered, and deaths number \r\nfunction InfoBox({title,cases,isRed,active,total,...props}){\r\n    return(\r\n        <Card\r\n        onClick ={props.onClick} \r\n        className={`infoBox ${active && \"infoBox-selected\"} ${isRed && \"infoBox-red\"}`}>\r\n            <CardContent  style={{cursor: \"pointer\"}}>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className= {`infoBox_cases ${!isRed && \"infoBox_cases-green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n\r\n\r\n//change color of circles \r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\n//for sorting data\r\nexport const sortData = (data)=>{\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b)=>(a.cases>b.cases?-1:1));\r\n}\r\n\r\n//show circles(from leaflet) on map with radius based on number of cases and Popup(from leaflet) to display more information when clicked on circle\r\nexport const showDataOnMap = (data, casesType=\"cases\") => (\r\n    data.map(country=>(\r\n        <Circle  id={Math.random().toString(36).substr(2, 9)}\r\n                center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                fillOpacity={0.4}\r\n                color={casesTypeColors[casesType].hex}\r\n                fillColor={casesTypeColors[casesType].hex}\r\n                radius={Math.sqrt(country[casesType]) \r\n                    * casesTypeColors[casesType].multiplier}\r\n               \r\n        >\r\n            <Popup  id={Math.random().toString(36).substr(2, 9)}>\r\n                <div id={Math.random().toString(36).substr(2, 9)} className=\"info-container\">\r\n                    <div  id={Math.random().toString(36).substr(2, 9)}  className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-name\" >\r\n                        {country.country}\r\n                    </div>\r\n                 \r\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-deaths\">\r\n                    Deaths : {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n\r\n//Prints number in short format for example: 3000 => 3.0 k\r\nexport const prettyPrintStat =(stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport {showDataOnMap} from \"./utility/util\"\r\n\r\n//Draws map with circles describing data\r\nfunction Map({countries, casesType, center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                 attribution='&copy; <a href=\"http://osm.org/copyright\" rel=\"noopener noreferrer\" target=\"_blank\">OpenStreetMap</a> contributors'\r\n                 noWrap=\"true\"\r\n                 continuousWorld=\"true\" />\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\n//draws table displaying live data\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        <table>\r\n        <tbody>       \r\n          {countries.map(({country,cases}) => (\r\n            <tr key={Math.random().toString(36).substr(2, 9)}>\r\n              <td key={Math.random().toString(36).substr(2, 9)}>{country}</td>\r\n              <td key={Math.random().toString(36).substr(2, 9)}>\r\n                <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n              </td>\r\n            </tr>\r\n        \r\n          ))}\r\n          </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Table;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\n//option dictionary style for Line option of react-chartjs-2\r\nconst options = {\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        points:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label:function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[{\r\n            type: \"time\",\r\n            time:{\r\n                format:\"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n            },\r\n        },],\r\n        yAxes: [\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n                ticks:{\r\n                    callback: function(value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            }\r\n        ],\r\n    },\r\n}\r\n\r\n//Displays a line-graph of cases from continuous data-set of last 160 days\r\nfunction LineGraph({casesType = \"cases\",...props}) {\r\n    const [data,setData] = useState({});\r\n\r\n\r\n    const buildChartData = (data,casesType=\"cases\") => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for(let date in data.cases){\r\n            if(lastDataPoint){\r\n                const newDataPoint = {\r\n                    x:date, \r\n                    y:data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async()=>{\r\n            await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=160\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n        fetchData();\r\n    }, [casesType])\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data && data.length >0 && (\r\n                <Line data={{\r\n                datasets:[{\r\n                    backgroundColor: \"rgba(204,16,52,0.7)\",\r\n                    borderColor: \"#CC1034\",\r\n                    data:data,\r\n                }]\r\n                }} \r\n            options={ options} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\nimport \"./Vaccine.css\"\r\n\r\n\r\n//Displays table showing vaccine data trials\r\nfunction Vaccine({vaccine}) {\r\n    return (\r\n        <div className=\"vaccine-container\">\r\n          <h3>COVID-19 Vaccine Trials</h3> \r\n          <div className=\"vac-table-div\">\r\n          <table>\r\n                <thead className=\"table-head\">\r\n                    <tr>\r\n                        <th key={1}>\r\n                            Candidate\r\n                        </th>\r\n                        <th key={2}>\r\n                            Mechanism\r\n                        </th>\r\n                        <th key={3}>\r\n                            Trial Phase\r\n                        </th>\r\n                        <th key={4}>\r\n                            Institution\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {vaccine.map(({candidate,mechanism,trialPhase,institutions})=>(\r\n                        <tr key={Math.random().toString(36).substr(2, 9)}>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{candidate}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{mechanism}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{trialPhase}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{institutions.join(\", \")}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n          </table>\r\n          </div>\r\n          <a className=\"source_link\" href=\"https://www.raps.org/news-and-articles/news-articles/2020/3/covid-19-vaccine-tracker\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n              View source RAPS website</a>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Vaccine;\r\n","import React from 'react'\r\nimport \"./Therapeutic.css\";\r\n\r\n//Draws table displaying therapeutic trials data\r\nfunction Therapeutic({therapeutic}) {\r\n    return (\r\n        <div className=\"outside-therapeutic\">\r\n          <div className=\"therapeutic-container\">\r\n          <h3>COVID-19 Therapeutic Trials</h3> \r\n          <div className=\"thera-table-div\">\r\n          <table>\r\n                <thead className=\"thera-head\">\r\n                    <tr>\r\n                        <th key={1}>\r\n                            Medication Class\r\n                        </th>\r\n                        <th key={2}>\r\n                            Trade Name\r\n                        </th>\r\n                        <th key={3}>\r\n                            Researcher\r\n                        </th>\r\n                        <th key={4}>\r\n                            Trial Phase\r\n                        </th>\r\n                        <th key={5}>\r\n                            Last Update\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {therapeutic.map(({medicationClass,tradeName,researcher,trialPhase,lastUpdate})=>(\r\n                        <tr key={Math.random().toString(36).substr(2, 9)}>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{medicationClass}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{tradeName.join(\", \")}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{researcher.join(\", \")}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{trialPhase}</td>\r\n                            <td key={Math.random().toString(36).substr(2, 9)}>{lastUpdate}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n          </table>\r\n          </div>\r\n          <a className=\"source_link\" href=\"https://www.raps.org/news-and-articles/news-articles/2020/3/covid-19-therapeutics-tracker\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n              View source RAPS website \r\n          </a>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Therapeutic;\r\n","import React, { useEffect, useState } from 'react';\nimport {MenuItem,FormControl,Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox.comp\";\nimport Map from \"./components/Map.comp\";\nimport Table from \"./components/Table.comp\";\nimport {sortData, prettyPrintStat} from \"./components/utility/util\";\nimport './App.css';\nimport LineGraph from \"./components/LineGraph.comp\";\nimport Vaccine from \"./components/Vaccine.comp\";\nimport Therapeutic from \"./components/Therapeutic.comp\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n  const[countries, setCountries] = useState([]);          //to store data of different countries\n  const[country,setCountry] = useState(\"worldwide\");      //to display currently selected country from drop-down\n  const [countryInfo, setCountryInfo] = useState({});     //get covid-info for the selected country\n  const [tableData, setTableData] = useState([]);         //data to display live cases based on country \n  const [mapCenter, setMapCenter] = useState({lat: 39.80746, lng:0.4796});  //center the map based on country\n  const [mapZoom, setMapZoom] = useState(2);               //set zoom for map\n  const [mapCountries, setMapCountries] = useState([]);   //country on map\n  const [casesType, setCasesType] = useState(\"cases\");    //Live corona cases\n  const [vaccine, setVaccine] = useState([]);             //Covid-19 vaccine trial data\n  const [therapeutic, setTherapeutic] = useState([]);     //Covid-19 therapeutic trial data\n\n  //gets all country info\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response=>response.json())\n    .then(data=>{\n      setCountryInfo(data);\n    })\n  },[])\n\n  //gets,extracts, and assigns covid-19 therapeutic trial data to therapeutic state\n  useEffect(()=>{\n    const getTherapeuticData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/therapeutics\")  //disease.sh api \n      .then((response)=>response.json())\n      .then((info)=>{\n        const therapeutics = info.data.map((thera)=>(\n          {\n            medicationClass: thera.medicationClass,\n            tradeName: thera.tradeName,\n            researcher: thera.developerResearcher,\n            trialPhase: thera.trialPhase,\n            lastUpdate: thera.lastUpdate,\n          }));\n          setTherapeutic(therapeutics)\n      });\n    };\n    getTherapeuticData();\n  },[])\n\n  //gets,extracts, and assigns covid-19 vaccine trial data to vaccine state\n  useEffect(()=>{\n    const getVaccineData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/vaccine\")\n      .then((response)=>response.json())\n      .then((info)=>{\n        const vaccine = info.data.map((vac)=>(\n          {\n            candidate: vac.candidate,\n            mechanism: vac.mechanism,\n            trialPhase: vac.trialPhase,\n            institutions: vac.institutions,\n          }));\n          setVaccine(vaccine);\n      });\n    };\n    getVaccineData();\n  },[])\n\n  //gets all country data, sorts it and assigns to tableData,mapCountries (unsorted),and countries(unsorted) state\n  useEffect(()=>{\n    const getCountriesData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n  },[])\n\n  //checks currently selected country and changes states\n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value;\n\n    const url = \n      (countryCode=== \"worldwide\")\n      ? \"https://disease.sh/v3/covid-19/all\"\n      :`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response=>response.json())\n    .then(data=>{\n      setCountry(countryCode);\n      setCountryInfo(data);\n      if(countryCode===\"worldwide\"){\n        setMapCenter([39.80746,10.4796]);\n        setMapZoom(2);\n      }else{\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      }\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_top\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n\n          {/** Adding Material UI form control, select, menuItem for dropdown to select countries */}\n            <FormControl className=\"app_dropdown\">\n              <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {\n                  countries.map((country) => (\n                  <MenuItem key={Math.random().toString(36).substr(2, 9)} value={country.value}>{country.name}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>\n        </div>\n\n          {/** Infobox to display cases, recovered, deaths in currently selected country */}\n        <div className=\"app_stats\"  >\n          <InfoBox\n            isRed\n            onClick={(e) => setCasesType(\"cases\")} \n            active = {casesType ===\"cases\"}\n            title=\"Corona Cases Today:\" \n            cases = {prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox \n            onClick={(e) => setCasesType(\"recovered\")} \n            active = {casesType ===\"recovered\"}\n            title=\"Recovered Today:\" \n            cases = {prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox \n            isRed\n            onClick={(e) => setCasesType(\"deaths\")}\n            active = {casesType ===\"deaths\"}\n            title=\"Deaths Today:\" \n            cases = {prettyPrintStat(countryInfo.todayDeaths)} \n            total = {prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n        {/** Adds map with circles and popup */}\n        <Map casesType={casesType} countries={mapCountries} center = {mapCenter} zoom={mapZoom}/>\n      </div>\n      {/** Material UI card with cardcontent to display table of live cases and a line graph */}\n      <Card className=\"app_right\">\n          <CardContent>\n            <h3>\n              Live Cases by Country\n              <Table countries={tableData}/>\n            </h3>\n            <h3 className=\"app_right_line_head\">\n              Worldwide new {casesType}\n            </h3>\n            <LineGraph className=\"app_graph\" casesType={casesType}/>\n          </CardContent>\n      </Card>\n      </div>\n      {/** container to display vaccine and therapeutic trials */}\n      <div  className=\"app_bottom\">\n        <div className=\"app_vaccine\">  \n          <Vaccine vaccine={vaccine}/>\n        </div>\n        <div className=\"app_therapeutic\">\n          <Therapeutic therapeutic={therapeutic} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}