{"ast":null,"code":"var _jsxFileName = \"/Users/theorder/Desktop/covid stuff 349/COVID web app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox.comp\";\nimport Map from \"./components/Map.comp\";\nimport Table from \"./components/Table.comp\";\nimport { sortData, prettyPrintStat } from \"./components/utility/util\";\nimport './App.css';\nimport LineGraph from \"./components/LineGraph.comp\";\nimport Vaccine from \"./components/Vaccine.comp\";\nimport \"leaflet/dist/leaflet.css\";\nimport { fetchData } from './API'; //we dont have to specify index file name if your file name is index\n\nimport { fetchDailyData } from './API'; //we dont have to specify index file name if your file name is index\n\nimport { Cards, Charts, CountryPicker } from './components';\n\nfunction App() {\n  const [countries, setCountries] = useState([]); //to store data of different countries\n\n  const [country, setCountry] = useState(\"worldwide\"); //to display currently selected country from drop-down\n\n  const [countryInfo, setCountryInfo] = useState({}); //get covid-info for the selected country\n\n  const [tableData, setTableData] = useState([]); //data to display live cases based on country \n\n  const [mapCenter, setMapCenter] = useState({\n    lat: 39.80746,\n    lng: 0.4796\n  }); //center the map based on country\n\n  const [mapZoom, setMapZoom] = useState(2); //set zoom for map\n\n  const [mapCountries, setMapCountries] = useState([]); //country on map\n\n  const [casesType, setCasesType] = useState(\"cases\"); //Live corona cases\n\n  const [vaccine, setVaccine] = useState([]); //Covid-19 vaccine trial data\n\n  {\n    /*here is where I declare the state for the  */\n  }\n  const [data, setData] = useState([]);\n  {\n    /*SUCCESSFULLY RETRIEVE DATA USING AXIOS but just the  */\n  }\n  useEffect(() => {\n    //something\n    const invokation = async () => {\n      setData(fetchData());\n    };\n\n    invokation();\n    console.log('here!!!!!!!');\n    console.log(fetchDailyData()); // this is how to fetch the data\n\n    const temp = fetchDailyData();\n    setData(temp);\n    console.log('printing from variable');\n    console.log(temp);\n  }, []); //gets all country info\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []); //gets,extracts, and assigns covid-19 vaccine trial data to vaccine state\n\n  useEffect(() => {\n    const getVaccineData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/vaccine\").then(response => response.json()).then(info => {\n        const vaccine = info.data.map(vac => ({\n          candidate: vac.candidate,\n          mechanism: vac.mechanism,\n          trialPhase: vac.trialPhase,\n          institutions: vac.institutions\n        }));\n        setVaccine(vaccine);\n      });\n    };\n\n    getVaccineData();\n  }, []); //gets all country data, sorts it and assigns to tableData,mapCountries (unsorted),and countries(unsorted) state\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []); //checks currently selected country and changes states\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      if (countryCode === \"worldwide\") {\n        setMapCenter([39.80746, 10.4796]);\n        setMapZoom(2);\n      } else {\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Team 4 COVID tracker\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InfoBox, {\n    isRed: true,\n    onClick: e => setCasesType(\"cases\"),\n    active: casesType === \"cases\",\n    title: \"Corona Cases Today:\",\n    cases: prettyPrintStat(countryInfo.todayCases),\n    total: prettyPrintStat(countryInfo.cases),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InfoBox, {\n    onClick: e => setCasesType(\"recovered\"),\n    active: casesType === \"recovered\",\n    title: \"Recovered Today:\",\n    cases: prettyPrintStat(countryInfo.todayRecovered),\n    total: prettyPrintStat(countryInfo.recovered),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(InfoBox, {\n    isRed: true,\n    onClick: e => setCasesType(\"deaths\"),\n    active: casesType === \"deaths\",\n    title: \"Deaths Today:\",\n    cases: prettyPrintStat(countryInfo.todayDeaths),\n    total: prettyPrintStat(countryInfo.deaths),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Map, {\n    casesType: casesType,\n    countries: mapCountries,\n    center: mapCenter,\n    zoom: mapZoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    className: \"app_right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"app_right_line_head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, \"Worldwide new \", casesType), /*#__PURE__*/React.createElement(LineGraph, {\n    className: \"app_graph\",\n    casesType: casesType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app_vaccine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Vaccine, {\n    vaccine: vaccine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Charts, {\n    data: data,\n    country: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/theorder/Desktop/covid stuff 349/COVID web app/src/App.js"],"names":["React","useEffect","useState","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","prettyPrintStat","LineGraph","Vaccine","fetchData","fetchDailyData","Cards","Charts","CountryPicker","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","mapCountries","setMapCountries","casesType","setCasesType","vaccine","setVaccine","data","setData","invokation","console","log","temp","fetch","then","response","json","getVaccineData","info","map","vac","candidate","mechanism","trialPhase","institutions","getCountriesData","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {MenuItem,FormControl,Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox.comp\";\nimport Map from \"./components/Map.comp\";\nimport Table from \"./components/Table.comp\";\nimport {sortData, prettyPrintStat} from \"./components/utility/util\";\nimport './App.css';\nimport LineGraph from \"./components/LineGraph.comp\";\nimport Vaccine from \"./components/Vaccine.comp\";\nimport \"leaflet/dist/leaflet.css\";\nimport {fetchData} from './API';//we dont have to specify index file name if your file name is index\nimport {fetchDailyData} from './API';//we dont have to specify index file name if your file name is index\nimport {Cards, Charts, CountryPicker } from './components'\n\n\n\nfunction App() {\n\n  const[countries, setCountries] = useState([]);          //to store data of different countries\n  const[country,setCountry] = useState(\"worldwide\");      //to display currently selected country from drop-down\n  const [countryInfo, setCountryInfo] = useState({});     //get covid-info for the selected country\n  const [tableData, setTableData] = useState([]);         //data to display live cases based on country \n  const [mapCenter, setMapCenter] = useState({lat: 39.80746, lng:0.4796});  //center the map based on country\n  const [mapZoom, setMapZoom] = useState(2);               //set zoom for map\n  const [mapCountries, setMapCountries] = useState([]);   //country on map\n  const [casesType, setCasesType] = useState(\"cases\");    //Live corona cases\n  const [vaccine, setVaccine] = useState([]);             //Covid-19 vaccine trial data\n\n  {/*here is where I declare the state for the  */}\n  const [data, setData] = useState([]);\n\n  {/*SUCCESSFULLY RETRIEVE DATA USING AXIOS but just the  */}\n  useEffect(()=> {\n    //something\n    const invokation = async()=>{\n      setData(fetchData())\n    };\n    invokation();\n    console.log('here!!!!!!!')\n    console.log(fetchDailyData()) // this is how to fetch the data\n    const temp = fetchDailyData()\n    setData(temp)\n    console.log('printing from variable')\n    console.log(temp)\n\n  }, [])\n\n  //gets all country info\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response=>response.json())\n    .then(data=>{\n      setCountryInfo(data);\n    })\n  },[])\n\n  \n  //gets,extracts, and assigns covid-19 vaccine trial data to vaccine state\n  useEffect(()=>{\n    const getVaccineData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/vaccine\")\n      .then((response)=>response.json())\n      .then((info)=>{\n        const vaccine = info.data.map((vac)=>(\n          {\n            candidate: vac.candidate,\n            mechanism: vac.mechanism,\n            trialPhase: vac.trialPhase,\n            institutions: vac.institutions,\n          }));\n          setVaccine(vaccine);\n      });\n    };\n    getVaccineData();\n  },[])\n\n  //gets all country data, sorts it and assigns to tableData,mapCountries (unsorted),and countries(unsorted) state\n  useEffect(()=>{\n    const getCountriesData = async ()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=>response.json())\n      .then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n  },[])\n\n  //checks currently selected country and changes states\n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value;\n\n    const url = \n      (countryCode=== \"worldwide\")\n      ? \"https://disease.sh/v3/covid-19/all\"\n      :`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response=>response.json())\n    .then(data=>{\n      setCountry(countryCode);\n      setCountryInfo(data);\n      if(countryCode===\"worldwide\"){\n        setMapCenter([39.80746,10.4796]);\n        setMapZoom(2);\n      }else{\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      }\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_top\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>Team 4 COVID tracker</h1>          \n        </div>\n\n          {/** Infobox to display cases, recovered, deaths in currently selected country */}\n        <div className=\"app_stats\"  >\n          <InfoBox\n            isRed\n            onClick={(e) => setCasesType(\"cases\")} \n            active = {casesType ===\"cases\"}\n            title=\"Corona Cases Today:\" \n            cases = {prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox \n            onClick={(e) => setCasesType(\"recovered\")} \n            active = {casesType ===\"recovered\"}\n            title=\"Recovered Today:\" \n            cases = {prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox \n            isRed\n            onClick={(e) => setCasesType(\"deaths\")}\n            active = {casesType ===\"deaths\"}\n            title=\"Deaths Today:\" \n            cases = {prettyPrintStat(countryInfo.todayDeaths)} \n            total = {prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n        {/** Adds map with circles and popup */}\n        <Map casesType={casesType} countries={mapCountries} center = {mapCenter} zoom={mapZoom}/>\n      </div>\n      {/** Material UI card with cardcontent to display table of live cases and a line graph */}\n      <Card className=\"app_right\">\n          <CardContent>\n            \n            <h3 className=\"app_right_line_head\">\n              Worldwide new {casesType}\n            </h3>\n            <LineGraph className=\"app_graph\" casesType={casesType}/>\n          </CardContent>\n      </Card>\n      </div>\n      {/** container to display vaccine and therapeutic trials */}\n      <div  className=\"app_bottom\">\n        <div className=\"app_vaccine\">  \n          <Vaccine vaccine={vaccine}/>\n        </div>\n        \n        {/*THIS IS WHERE THE NEW CHART IS SUPPOSED TO GO!!! */}\n\n        {/*-------------------------------------------------------------------------------*/}\n        {/* THIS IS WHERE THE CHART WILL BE*/}\n        <Charts data={data} country={null}/>\n        {/*-------------------------------------------------------------------------------*/}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}