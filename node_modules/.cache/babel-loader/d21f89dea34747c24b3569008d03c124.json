{"ast":null,"code":"var _jsxFileName = \"/Users/theorder/Desktop/covid stuff 349/v2 stable with new line graph/src/components/utility/util.js\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\"; //change color of circles \n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 800\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 2000\n  }\n}; //for sorting data\n\nexport const sortData = data => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n}; //show circles(from leaflet) on map with radius based on number of cases and Popup(from leaflet) to display more information when clicked on circle\n\nexport const showDataOnMap = (data, casesType = \"cases\") => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  id: Math.random().toString(36).substr(2, 9),\n  center: [country.countryInfo.lat, country.countryInfo.long],\n  fillOpacity: 0.4,\n  color: casesTypeColors[casesType].hex,\n  fillColor: casesTypeColors[casesType].hex,\n  radius: Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  id: Math.random().toString(36).substr(2, 9),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-flag\",\n  style: {\n    backgroundImage: `url(${country.countryInfo.flag})`\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 21\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-name\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }\n}, country.country), /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-confirmed\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 21\n  }\n}, \"Cases: \", numeral(country.cases).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-recovered\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 21\n  }\n}, \"Recovered: \", numeral(country.recovered).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  id: Math.random().toString(36).substr(2, 9),\n  className: \"info-deaths\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }\n}, \"Deaths : \", numeral(country.deaths).format(\"0,0\")))))); //Prints number in short format for example: 3000 => 3.0 k\n\nexport const prettyPrintStat = stat => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","map":{"version":3,"sources":["/Users/theorder/Desktop/covid stuff 349/v2 stable with new line graph/src/components/utility/util.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Math","random","toString","substr","countryInfo","lat","long","sqrt","backgroundImage","flag","format","prettyPrintStat","stat"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport numeral from \"numeral\";\nimport {Circle, Popup} from \"react-leaflet\";\n\n\n//change color of circles \nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 2000,\n    },\n  };\n\n//for sorting data\nexport const sortData = (data)=>{\n    const sortedData = [...data];\n    return sortedData.sort((a,b)=>(a.cases>b.cases?-1:1));\n}\n\n//show circles(from leaflet) on map with radius based on number of cases and Popup(from leaflet) to display more information when clicked on circle\nexport const showDataOnMap = (data, casesType=\"cases\") => (\n    data.map(country=>(\n        <Circle  id={Math.random().toString(36).substr(2, 9)}\n                center={[country.countryInfo.lat, country.countryInfo.long]}\n                fillOpacity={0.4}\n                color={casesTypeColors[casesType].hex}\n                fillColor={casesTypeColors[casesType].hex}\n                radius={Math.sqrt(country[casesType]) \n                    * casesTypeColors[casesType].multiplier}\n               \n        >\n            <Popup  id={Math.random().toString(36).substr(2, 9)}>\n                <div id={Math.random().toString(36).substr(2, 9)} className=\"info-container\">\n                    <div  id={Math.random().toString(36).substr(2, 9)}  className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-name\" >\n                        {country.country}\n                    </div>\n                 \n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-confirmed\">\n                        Cases: {numeral(country.cases).format(\"0,0\")}\n                    </div>\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-recovered\">\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\n                    </div>\n                    <div id={Math.random().toString(36).substr(2, 9)} className=\"info-deaths\">\n                    Deaths : {numeral(country.deaths).format(\"0,0\")}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);\n\n//Prints number in short format for example: 3000 => 3.0 k\nexport const prettyPrintStat =(stat) =>\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";"]},"metadata":{},"sourceType":"module"}